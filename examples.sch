(define randwalk
  `(cons 17 (lambda (s w)
	      (cons (+ 12345 (* s 1103515245))
		    (if (< s 0) (- 3 (/ s ,(- (expt 2 30)))) 
			(/ s ,(expt 2 30)))))))

(define faceplant
  `(letrec ((nth (lambda (n l) (if n (funcall nth (- n 1) (cdr l)) (car l)))))
     (cons 0
      (lambda (s w)
	(let ((wmap (car w))
	      (here (car (cdr (car (cdr w))))))
	  (let ((x (car here))
		(y (cdr here)))
	    (letrec ((try (lambda (s)
				(let ((dx (if (= s 1) 1 (if (= s 3) -1 0)))
				      (dy (if (= s 2) 1 (if (= s 0) -1 0))))
				  (if (funcall nth (+ x dx) (funcall nth (+ y dy) wmap))
				      (cons s s)
				      (funcall try (if (= s 3) 0 (+ s 1))))))))
	      (funcall try s))))))))

(define simplesearch
  `(letrec ((drop (lambda (n l) (if n (funcall drop (- n 1) (cdr l)) l))))
     (cons 0
      (lambda (s w)
	(let ((wmap (car w))
	      (here (car (cdr (car (cdr w))))))
	  (let ((x (car here))
		(y (cdr here)))
	    (let ((chop (funcall drop (- y 1) wmap)))
	      (let ((thischop (funcall drop (- x 1) (car (cdr chop)))))
		(let ((sq0 (car (funcall drop x (car chop))))
		      (sq1 (car (cdr (cdr thischop))))
		      (sq2 (car (funcall drop x (car (cdr (cdr chop))))))
		      (sq3 (car thischop)))
		  (let ((b0 (+ (if (>= s 0) 4 0) (* 8 (if (> sq0 3) 1 sq0))))
			(b1 (+ (if (>= s 1) 5 1) (* 8 (if (> sq1 3) 1 sq1))))
			(b2 (+ (if (>= s 2) 6 2) (* 8 (if (> sq2 3) 1 sq2))))
			(b3 (+ (if (>= s 3) 7 3) (* 8 (if (> sq3 3) 1 sq3)))))
		    (let ((b01 (if (> b0 b1) b0 b1))
			  (b23 (if (> b2 b3) b2 b3)))
		      (let ((whereunto
			     (if (> b01 b23)
				 (if (> b0 b1) 0 1)
				 (if (> b2 b3) 2 3))))
			(cons whereunto whereunto)))))))))))))
