(define randwalk
  `(cons 17 (lambda (s w)
	      (cons (+ 12345 (* s 1103515245))
		    (if (< s 0) (- 3 (/ s ,(- (expt 2 30)))) 
			(/ s ,(expt 2 30)))))))
(define faceplant
  `(letrec ((nth (lambda (n l) (if n (nth (- n 1) (cdr l)) (car l)))))
     (cons 0
      (lambda (s w)
	(let ((wmap (car w))
	      (here (car (cdr (car (cdr w))))))
	  (let ((x (car here))
		(y (cdr here)))
	    (letrec ((try (lambda (s)
				(let ((dx (if (= s 1) 1 (if (= s 3) -1 0)))
				      (dy (if (= s 2) 1 (if (= s 0) -1 0))))
				  (if (nth (+ x dx) (nth (+ y dy) wmap))
				      (cons s s)
				      (try (if (= s 3) 0 (+ s 1))))))))
	      (try s))))))))

(define simplesearch
  `(letrec ((drop (lambda (n l) (if n (drop (- n 1) (cdr l)) l))))
     (cons 0
      (lambda (s w)
	(let ((wmap (car w))
	      (here (car (cdr (car (cdr w))))))
	  (let ((x (car here))
		(y (cdr here)))
	    (let ((chop (drop (- y 1) wmap)))
	      (let ((thischop (drop (- x 1) (car (cdr chop)))))
		(let ((sq0  (car (drop x (car chop))))
		      (sq1  (car (cdr (cdr thischop))))
		      (sq2  (car (drop x (car (cdr (cdr chop))))))
		      (sq3  (car thischop)))
		  (let ((b0 (+ (if (= s 0)  8 0) (* ,(expt 2 29) sq0)))
			(b1 (+ (if (= s 1)  9 1) (* ,(expt 2 29) sq1)))
			(b2 (+ (if (= s 2) 10 2) (* ,(expt 2 29) sq2)))
			(b3 (+ (if (= s 3) 11 3) (* ,(expt 2 29) sq3))))
		    (let ((b01 (if (> b0 b1) b0 b1))
			  (b23 (if (> b2 b3) b2 b3)))
		      (let ((b0123 (if (> b01 b23) b01 b23)))
			(let ((whereunto (/ (* ,(expt 2 29) b0123) ,(expt 2 29))))
			  (with-debug (cons b0123 whereunto)
				      (cons whereunto whereunto)))))))))))))))
